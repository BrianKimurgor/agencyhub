// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(255)
  address         String?
  contactEmail    String?       @db.VarChar(255)
  contactPhone    String?       @db.VarChar(255)
  industry        String?       @db.VarChar(255)
  socialMedia     String[]
  news            String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  clients         Client[]
  subAgencies     SubAgency[]
  performances    Performance[]
  brandings       Branding[]
  integrations    Integration[]
}

model Client {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(255)
  email           String        @db.VarChar(255)
  phone           String?       @db.VarChar(255)
  address         String?
  companyId       Int?
  company         Company?      @relation(fields: [companyId], references: [id], onDelete: SetNull)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  communicationLogs CommunicationLog[]
  subAgencyClients SubAgencyClient[]
}

model CommunicationLog {
  id          Int       @id @default(autoincrement())
  clientId    Int
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  date        DateTime  @default(now())
  type        String    @db.VarChar(50)
  notes       String?
}

model SubAgency {
  id                 Int                 @id @default(autoincrement())
  name               String              @db.VarChar(255)
  parentAgencyId     Int
  parentAgency       Company             @relation(fields: [parentAgencyId], references: [id], onDelete: Cascade)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  subAgencyClients   SubAgencyClient[]
  subAgencyProjects  SubAgencyProject[]
  subAgencyTeamMembers SubAgencyTeamMember[]
  performances       Performance[]
}

model SubAgencyClient {
  subAgencyId  Int
  subAgency    SubAgency   @relation(fields: [subAgencyId], references: [id], onDelete: Cascade)
  clientId     Int
  client       Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  @@id([subAgencyId, clientId])
}

model SubAgencyProject {
  subAgencyId  Int
  subAgency    SubAgency   @relation(fields: [subAgencyId], references: [id], onDelete: Cascade)
  projectId    Int
  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  @@id([subAgencyId, projectId])
}

model SubAgencyTeamMember {
  subAgencyId  Int
  subAgency    SubAgency   @relation(fields: [subAgencyId], references: [id], onDelete: Cascade)
  userId       Int
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([subAgencyId, userId])
}

model Project {
  id                 Int                 @id @default(autoincrement())
  name               String              @db.VarChar(255)
  description        String?
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  tasks              Task[]
  milestones         Milestone[]
  resourceAllocations ResourceAllocation[]
  performances       Performance[]
}

model Task {
  id          Int       @id @default(autoincrement())
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String    @db.VarChar(255)
  description String?
  assignedTo  Int?
  user        User?     @relation(fields: [assignedTo], references: [id])
  dueDate     DateTime?
  status      String    @default("pending") @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Milestone {
  id          Int       @id @default(autoincrement())
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String    @db.VarChar(255)
  description String?
  dueDate     DateTime?
  status      String    @default("pending") @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ResourceAllocation {
  id           Int       @id @default(autoincrement())
  projectId    Int
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  teamMembers  Int[]
  budget       Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Performance {
  id                  Int      @id @default(autoincrement())
  agencyId            Int
  agency              Company  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  subAgencyId         Int?
  subAgency           SubAgency? @relation(fields: [subAgencyId], references: [id], onDelete: SetNull)
  projectId           Int?
  project             Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  revenue             Float    @default(0)
  clientSatisfaction  Float    @default(0) @db.Float
  profitability       Float    @default(0)
  timestamp           DateTime @default(now())
}

model Branding {
  id            Int       @id @default(autoincrement())
  agencyId      Int
  agency        Company   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  logoUrl       String?
  primaryColor  String?   @db.VarChar(7)
  secondaryColor String?  @db.VarChar(7)
  welcomeText   String?
  footerText    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Integration {
  id          Int       @id @default(autoincrement())
  agencyId    Int
  agency      Company   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  type        String    @db.VarChar(50)
  settings    Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  email       String    @unique @db.VarChar(255)
  password    String    @db.VarChar(255)
  role        String    @default("user") @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tasks       Task[]
  subAgencyTeamMembers SubAgencyTeamMember[]
  supportTickets SupportTicket[]
  chatMessages  ChatMessage[]
  auditLogs    AuditLog[]
}

model AuditLog {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String
  timestamp   DateTime  @default(now())
}

model SupportTicket {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject     String    @db.VarChar(255)
  description String
  status      String    @default("open") @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chatMessages ChatMessage[]
}

model ChatMessage {
  id          Int       @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  sender      User      @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  message     String
  timestamp   DateTime  @default(now())
}
