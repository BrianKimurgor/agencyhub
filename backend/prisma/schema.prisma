generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  address      String?
  contactEmail String?       @db.VarChar(255)
  contactPhone String?       @db.VarChar(255)
  industry     String?       @db.VarChar(255)
  socialMedia  SocialMedia[]
  news         News[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  clients      Client[]
  subAgencies  SubAgency[]
  performances Performance[]
  brandings    Branding[]
  integrations Integration[]
}

model Client {
  id              Int                @id @default(autoincrement())
  name            String             @db.VarChar(255)
  email           String             @db.VarChar(255)
  phone           String?            @db.VarChar(255)
  address         String?
  companyId       Int?
  company         Company?           @relation(fields: [companyId], references: [id], onDelete: SetNull)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  logs            CommunicationLog[]
  SubAgencyClient SubAgencyClient[]
}

model CommunicationLog {
  id       Int      @id @default(autoincrement())
  clientId Int
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  date     DateTime @default(now())
  type     String   @db.VarChar(50)
  notes    String?
}

model SubAgency {
  id             Int                   @id @default(autoincrement())
  name           String                @db.VarChar(255)
  parentCompanyId Int
  parentCompany  Company               @relation(fields: [parentCompanyId], references: [id], onDelete: Cascade)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  clients        SubAgencyClient[]
  projects       SubAgencyProject[]
  teamMembers    SubAgencyTeamMember[]
  performances   Performance[]
}

model SubAgencyClient {
  subAgencyId Int
  clientId    Int
  subAgency   SubAgency @relation(fields: [subAgencyId], references: [id], onDelete: Cascade)
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@id([subAgencyId, clientId])
}

model SubAgencyProject {
  subAgencyId Int
  projectId   Int
  subAgency   SubAgency @relation(fields: [subAgencyId], references: [id], onDelete: Cascade)
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([subAgencyId, projectId])
}

model SubAgencyTeamMember {
  subAgencyId Int
  userId      Int
  subAgency   SubAgency @relation(fields: [subAgencyId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([subAgencyId, userId])
}

model Project {
  id                  Int                  @id @default(autoincrement())
  name                String               @db.VarChar(255)
  description         String?
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  tasks               Task[]
  milestones          Milestone[]
  resourceAllocations ResourceAllocation[]
  performances        Performance[]
  SubAgencyProject    SubAgencyProject[]
}

model Task {
  id          Int       @id @default(autoincrement())
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String    @db.VarChar(255)
  description String?
  assignedTo  Int?
  user        User?     @relation(fields: [assignedTo], references: [id])
  dueDate     DateTime?
  status      String    @default("pending") @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Milestone {
  id          Int       @id @default(autoincrement())
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String    @db.VarChar(255)
  description String?
  dueDate     DateTime?
  status      String    @default("pending") @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ResourceAllocation {
  id        Int      @id @default(autoincrement())
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  budget    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Performance {
  id                 Int        @id @default(autoincrement())
  companyId          Int
  subAgencyId        Int?
  projectId          Int?
  revenue            Decimal    @default(0)
  clientSatisfaction Decimal    @default(0) @db.Decimal(3, 1)
  profitability      Float      @default(0)
  timestamp          DateTime   @default(now())
  company            Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subAgency          SubAgency? @relation(fields: [subAgencyId], references: [id], onDelete: SetNull)
  project            Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

model Branding {
  id             Int      @id @default(autoincrement())
  companyId      Int
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  logoUrl        String?
  primaryColor   String?  @db.VarChar(7)
  secondaryColor String?  @db.VarChar(7)
  welcomeText    String?
  footerText     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Integration {
  id        Int      @id @default(autoincrement())
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  type      String   @db.VarChar(50)
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String                @db.VarChar(255)
  email                String                @unique @db.VarChar(255)
  password             String                @db.VarChar(255)
  role                 String                @default("user") @db.VarChar(50)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  tasks                Task[]
  subAgencyTeamMembers SubAgencyTeamMember[]
  supportTickets       SupportTicket[]
  sentMessages         ChatMessage[]         @relation("Sender")
  receivedMessages     ChatMessage[]         @relation("Receiver")
  auditLogs            AuditLog[]
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  timestamp DateTime @default(now())
}

model SupportTicket {
  id           Int           @id @default(autoincrement())
  userId       Int
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject      String        @db.VarChar(255)
  description  String
  status       String        @default("open") @db.VarChar(50)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  chatMessages ChatMessage[]
}

model ChatMessage {
  id              Int            @id @default(autoincrement())
  senderId        Int
  receiverId      Int
  sender          User           @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver        User           @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  message         String
  timestamp       DateTime       @default(now())
  SupportTicket   SupportTicket? @relation(fields: [supportTicketId], references: [id])
  supportTicketId Int?
}

model SocialMedia {
  id        Int     @id @default(autoincrement())
  platform  String  @db.VarChar(255)
  link      String  @db.VarChar(255)
  companyId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model News {
  id        Int     @id @default(autoincrement())
  title     String  @db.VarChar(255)
  content   String
  companyId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}
